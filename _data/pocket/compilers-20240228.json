{"status": 1, "complete": 1, "list": {"3697919771": {"item_id": "3697919771", "resolved_id": "3697919771", "given_url": "https://blog.appsignal.com/2022/09/07/jit-compilers-for-ruby-and-rails-an-overview.html", "given_title": "JIT Compilers for Ruby and Rails: An Overview", "favorite": "0", "status": "1", "time_added": "1662555275", "time_updated": "1662599660", "time_read": "1662599660", "time_favorited": "0", "sort_id": 0, "resolved_title": "JIT Compilers for Ruby and Rails: An Overview", "resolved_url": "https://blog.appsignal.com/2022/09/07/jit-compilers-for-ruby-and-rails-an-overview.html", "excerpt": "A program is compiled at runtime using a different method from pre-execution compilation. This process is known as just-in-time compilation or dynamic translation.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "0", "word_count": "1141", "lang": "en", "time_to_read": 5, "top_image_url": "https://ondemand.bannerbear.com/signedurl/Mn62mqoVbWvyB5wgQ1/image.jpg?modifications=W3sibmFtZSI6InRpdGxlIiwidGV4dCI6IkpJVCBDb21waWxlcnMgZm9yIFJ1YnkgYW5kIFJhaWxzOiBBbiBPdmVydmlldyJ9LHsibmFtZSI6ImltYWdlIiwiaW1hZ2VfdXJsIjoiaHR0cHM6Ly9hcHBzaWduYWwtbmV4dGpzLWJsb2ctYnVkdWVrb2R3LWFwcHNpZ25hbC52ZXJjZWwuYXBwL2ltYWdlcy9ibG9nLzIwMjItMDkvaml0LXJ1YnkuanBnIn0seyJuYW1lIjoiY2F0ZWdvcnlfbG9nbyIsImltYWdlX3VybCI6Imh0dHBzOi8vYXBwc2lnbmFsLW5leHRqcy1ibG9nLWJ1ZHVla29kdy1hcHBzaWduYWwudmVyY2VsLmFwcC9pbWFnZXMvbG9nb3MvcnVieS1sb2dvLnBuZyJ9XQ&s=85c3f3a570184e59848bde7f825eefd2b6a4598a28bff9b3487e76aca5837ff8", "tags": {"compilers": {"item_id": "3697919771", "tag": "compilers"}, "ruby": {"item_id": "3697919771", "tag": "ruby"}, "rubyonrails": {"item_id": "3697919771", "tag": "rubyonrails"}}, "authors": {"171969757": {"item_id": "3697919771", "author_id": "171969757", "name": "Renata Marques", "url": "https://blog.appsignal.com/authors/renata-marques"}}, "listen_duration_estimate": 442}, "3227813456": {"item_id": "3227813456", "resolved_id": "3227813456", "given_url": "https://citw.dev/tutorial/create-your-own-compiler", "given_title": "Hacker News", "favorite": "0", "status": "1", "time_added": "1669559341", "time_updated": "1669592047", "time_read": "1669592045", "time_favorited": "0", "sort_id": 1, "resolved_title": "Create Your Own Compiler", "resolved_url": "https://citw.dev/tutorial/create-your-own-compiler", "excerpt": "In this tutorial, we'll be doing an instructed walkthrough of Jamie Kyle's \"The Super Tiny Compiler\". The Super Tiny Compiler is a simple compiler written in Javascript and we'll write it step by step from scratch.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "0", "word_count": "36", "lang": "en", "top_image_url": "https://citw.dev/cover.png", "tags": {"compilers": {"item_id": "3227813456", "tag": "compilers"}}, "listen_duration_estimate": 14}, "1005984270": {"item_id": "1005984270", "resolved_id": "1005984270", "given_url": "https://cs.lmu.edu/~ray/notes/syntaxdesign/", "given_title": "", "favorite": "0", "status": "1", "time_added": "1666105467", "time_updated": "1666397706", "time_read": "1666397705", "time_favorited": "0", "sort_id": 2, "resolved_title": "Syntax Design", "resolved_url": "https://cs.lmu.edu/~ray/notes/syntaxdesign/", "excerpt": "One of the most recognizable features of a languages is its syntax. What are some of the things about syntax that matter? What questions might you ask if you were creating a syntax for your own language? Motivation A programming language gives us a way structure our thoughts.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "1", "word_count": "2734", "lang": "en", "time_to_read": 12, "tags": {"compilers": {"item_id": "1005984270", "tag": "compilers"}, "language-linguistics": {"item_id": "1005984270", "tag": "language-linguistics"}}, "image": {"item_id": "1005984270", "src": "https://cs.lmu.edu/~ray/images/ast.png", "width": "0", "height": "0"}, "images": {"1": {"item_id": "1005984270", "image_id": "1", "src": "https://cs.lmu.edu/~ray/images/ast.png", "width": "0", "height": "0", "credit": "", "caption": ""}, "2": {"item_id": "1005984270", "image_id": "2", "src": "https://cs.lmu.edu/~ray/images/snap.png", "width": "0", "height": "0", "credit": "", "caption": ""}, "3": {"item_id": "1005984270", "image_id": "3", "src": "https://cs.lmu.edu/~ray/images/blueprints.png", "width": "0", "height": "0", "credit": "", "caption": ""}, "4": {"item_id": "1005984270", "image_id": "4", "src": "https://cs.lmu.edu/~ray/images/c-logo32.png", "width": "0", "height": "0", "credit": "", "caption": ""}, "5": {"item_id": "1005984270", "image_id": "5", "src": "https://cs.lmu.edu/~ray/images/zzzzing.png", "width": "0", "height": "0", "credit": "", "caption": ""}}, "listen_duration_estimate": 1058}, "15569827": {"item_id": "15569827", "resolved_id": "15569827", "given_url": "https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools", "given_title": "Compilers: Principles, Techniques, and Tools - Wikipedia", "favorite": "0", "status": "1", "time_added": "1600948934", "time_updated": "1604368299", "time_read": "1604368299", "time_favorited": "0", "sort_id": 3, "resolved_title": "Compilers: Principles, Techniques, and Tools", "resolved_url": "https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools", "excerpt": "Compilers: Principles, Techniques, and Tools[1] is a computer science textbook by Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman about compiler construction for programming languages. First published in 1986, it is widely regarded as the classic definitive compiler technology text.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "1", "word_count": "424", "lang": "en", "top_image_url": "https://upload.wikimedia.org/wikipedia/en/a/a3/Purple_dragon_book_b.jpg", "tags": {"compilers": {"item_id": "15569827", "tag": "compilers"}}, "authors": {"7331684": {"item_id": "15569827", "author_id": "7331684", "name": "From Wikipedia, the free", "url": ""}}, "image": {"item_id": "15569827", "src": "https://upload.wikimedia.org/wikipedia/en/thumb/a/a3/Purple_dragon_book_b.jpg/220px-Purple_dragon_book_b.jpg", "width": "220", "height": "333"}, "images": {"1": {"item_id": "15569827", "image_id": "1", "src": "https://upload.wikimedia.org/wikipedia/en/thumb/a/a3/Purple_dragon_book_b.jpg/220px-Purple_dragon_book_b.jpg", "width": "220", "height": "333", "credit": "North American", "caption": "The cover of the second edition"}}, "domain_metadata": {"name": "Wikipedia", "logo": "https://logo.clearbit.com/wikipedia.org?size=800", "greyscale_logo": "https://logo.clearbit.com/wikipedia.org?size=800&greyscale=true"}, "listen_duration_estimate": 164}, "3426335561": {"item_id": "3426335561", "resolved_id": "3426335561", "given_url": "https://huyenchip.com/2021/09/07/a-friendly-introduction-to-machine-learning-compilers-and-optimizers.html", "given_title": "", "favorite": "0", "status": "1", "time_added": "1633180153", "time_updated": "1633296878", "time_read": "1633296878", "time_favorited": "0", "sort_id": 4, "resolved_title": "A friendly introduction to machine learning compilers and optimizers", "resolved_url": "https://huyenchip.com/2021/09/07/a-friendly-introduction-to-machine-learning-compilers-and-optimizers.html", "excerpt": "[Twitter thread, Hacker News discussion] I have a confession to make. I cried during the compiler class in college. I became a machine learning engineer so that I wouldn’t have to worry about compilers.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "0", "word_count": "4164", "lang": "en", "time_to_read": 19, "top_image_url": "https://huyenchip.com/assets/pics/compilers/6_framework_hardware_compatibility.png", "tags": {"compilers": {"item_id": "3426335561", "tag": "compilers"}, "machine-learning": {"item_id": "3426335561", "tag": "machine-learning"}, "semiconductors": {"item_id": "3426335561", "tag": "semiconductors"}}, "listen_duration_estimate": 1612}, "2890981274": {"item_id": "2890981274", "resolved_id": "2890981274", "given_url": "https://ruslanspivak.com/lsbasi-part18/", "given_title": "Let’s Build a Simple Interpreter. Part 18: Executing Procedure Calls", "favorite": "0", "status": "1", "time_added": "1582477881", "time_updated": "1609642111", "time_read": "1583785007", "time_favorited": "0", "sort_id": 5, "resolved_title": "Let’s Build A Simple Interpreter. Part 18: Executing Procedure Calls", "resolved_url": "https://ruslanspivak.com/lsbasi-part18/", "excerpt": "“Do the best you can until you know better. Then when you know better, do better.” ― Maya Angelou It’s a huge milestone for us today! Because today we will extend our interpreter to execute procedure calls. If that’s not exciting, I don’t know what is.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "1", "word_count": "3266", "lang": "en", "time_to_read": 15, "top_image_url": "https://ruslanspivak.com/lsbasi-part18/lsbasi_part18_milestones.png", "tags": {"compilers": {"item_id": "2890981274", "tag": "compilers"}, "cpus": {"item_id": "2890981274", "tag": "cpus"}}, "authors": {"34985199": {"item_id": "2890981274", "author_id": "34985199", "name": "Ruslan Spivak", "url": ""}}, "image": {"item_id": "2890981274", "src": "https://ruslanspivak.com/lsbasi-part18/lsbasi_part18_milestones.png", "width": "640", "height": "0"}, "images": {"1": {"item_id": "2890981274", "image_id": "1", "src": "https://ruslanspivak.com/lsbasi-part18/lsbasi_part18_milestones.png", "width": "640", "height": "0", "credit": "", "caption": ""}, "2": {"item_id": "2890981274", "image_id": "2", "src": "https://ruslanspivak.com/lsbasi-part18/lsbasi_part18_astsymbollink.png", "width": "640", "height": "0", "credit": "", "caption": ""}, "3": {"item_id": "2890981274", "image_id": "3", "src": "https://ruslanspivak.com/lsbasi-part18/lsbasi_part18_symbolastlink.png", "width": "640", "height": "0", "credit": "", "caption": ""}, "4": {"item_id": "2890981274", "image_id": "4", "src": "https://ruslanspivak.com/lsbasi-part18/lsbasi_part18_callstack.png", "width": "260", "height": "0", "credit": "", "caption": ""}, "5": {"item_id": "2890981274", "image_id": "5", "src": "https://ruslanspivak.com/lsbasi-part18/lsbasi_part18_congrats.png", "width": "200", "height": "0", "credit": "", "caption": ""}}, "listen_duration_estimate": 1264}, "1905176149": {"item_id": "1905176149", "resolved_id": "1905176149", "given_url": "https://tomassetti.me/guide-parsing-algorithms-terminology/", "given_title": "A Guide to Parsing: Algorithms and Terminology", "favorite": "0", "status": "1", "time_added": "1506615008", "time_updated": "1706233547", "time_read": "1514398004", "time_favorited": "0", "sort_id": 6, "resolved_title": "A Guide to Parsing: Algorithms and Terminology", "resolved_url": "https://tomassetti.me/guide-parsing-algorithms-terminology/", "excerpt": "We have already introduced a few parsing terms, while listing the major tools and libraries used for parsing in Java, C#, Python and JavaScript.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "1", "word_count": "11172", "lang": "en", "time_to_read": 51, "top_image_url": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/09/Link-shares-FB-A-guide-to-parsing-Algorithms....jpg", "tags": {"algorithms-math": {"item_id": "1905176149", "tag": "algorithms-math"}, "compilers": {"item_id": "1905176149", "tag": "compilers"}, "parsing": {"item_id": "1905176149", "tag": "parsing"}}, "authors": {"130724035": {"item_id": "1905176149", "author_id": "130724035", "name": "Gabriele Tomassetti", "url": ""}}, "image": {"item_id": "1905176149", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/09/A-Guide-To-Parsing_-Algorithms-And-Terminology-for-new-site.jpg", "width": "1024", "height": "512"}, "images": {"1": {"item_id": "1905176149", "image_id": "1", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/09/A-Guide-To-Parsing_-Algorithms-And-Terminology-for-new-site.jpg", "width": "1024", "height": "512", "credit": "", "caption": ""}, "2": {"item_id": "1905176149", "image_id": "2", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/07/parsing_simple.png", "width": "600", "height": "600", "credit": "", "caption": ""}, "3": {"item_id": "1905176149", "image_id": "3", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/type-786900_1920-1030x728.jpg", "width": "1030", "height": "728", "credit": "", "caption": ""}, "4": {"item_id": "1905176149", "image_id": "4", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/02/lexer-parser-center-1030x187.png", "width": "1030", "height": "187", "credit": "", "caption": "The input stream is transformed into tokens and then into an AST by the parser"}, "5": {"item_id": "1905176149", "image_id": "5", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/trees.png", "width": "600", "height": "600", "credit": "", "caption": "A Parse Tree and Abstract Syntax Tree"}, "6": {"item_id": "1905176149", "image_id": "6", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/example_dot_tree.png", "width": "179", "height": "155", "credit": "", "caption": "Example image of a tree created by graphviz"}, "7": {"item_id": "1905176149", "image_id": "7", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/grammar-389907_1920-1030x682.jpg", "width": "1030", "height": "682", "credit": "", "caption": ""}, "8": {"item_id": "1905176149", "image_id": "8", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/09/example_expression_parse_tree.png", "width": "800", "height": "275", "credit": "", "caption": ""}, "9": {"item_id": "1905176149", "image_id": "9", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/dog.png", "width": "600", "height": "400", "credit": "", "caption": ""}, "10": {"item_id": "1905176149", "image_id": "10", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/blue-1815442_1920-1030x804.jpg", "width": "1030", "height": "804", "credit": "", "caption": ""}, "11": {"item_id": "1905176149", "image_id": "11", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/Parse_Tree_Example.png", "width": "884", "height": "808", "credit": "", "caption": ""}, "12": {"item_id": "1905176149", "image_id": "12", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/Top-down_Parse_Tree_Order-300x290.png", "width": "300", "height": "290", "credit": "", "caption": ""}, "13": {"item_id": "1905176149", "image_id": "13", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/08/Bottom-up_Parse_Tree_Order-300x288.png", "width": "300", "height": "288", "credit": "", "caption": ""}, "14": {"item_id": "1905176149", "image_id": "14", "src": "https://mk0tuzolorusfnc7thxk.kinstacdn.com/wp-content/uploads/2017/09/parsing_algorithms-1.png", "width": "1041", "height": "1011", "credit": "", "caption": ""}}, "listen_duration_estimate": 4325}, "3198769046": {"item_id": "3198769046", "resolved_id": "3198769046", "given_url": "https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/", "given_title": "Hacker News", "favorite": "0", "status": "1", "time_added": "1678707343", "time_updated": "1678711758", "time_read": "1678711757", "time_favorited": "0", "sort_id": 7, "resolved_title": "CS 6120: Advanced Compilers: The Self-Guided Online Course", "resolved_url": "https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/", "excerpt": "CS 6120 is a PhD-level Cornell CS course by Adrian Sampson on programming language implementation.", "is_article": "1", "is_index": "0", "has_video": "0", "has_image": "0", "word_count": "226", "lang": "", "tags": {"compilers": {"item_id": "3198769046", "tag": "compilers"}}, "listen_duration_estimate": 87}, "1823290234": {"item_id": "1823290234", "resolved_id": "1823290234", "given_url": "https://www3.nd.edu/~dthain/compilerbook/", "given_title": "", "favorite": "0", "status": "1", "time_added": "1652873552", "time_updated": "1653075591", "time_read": "1653075590", "time_favorited": "0", "sort_id": 8, "resolved_title": "Introduction to Compilers and Language Design", "resolved_url": "https://www3.nd.edu/~dthain/compilerbook/", "excerpt": "A compiler translates a program written in a high level language into a program written in a lower level language.", "is_article": "0", "is_index": "1", "has_video": "0", "has_image": "1", "word_count": "185", "lang": "", "tags": {"books": {"item_id": "1823290234", "tag": "books"}, "compilers": {"item_id": "1823290234", "tag": "compilers"}}, "image": {"item_id": "1823290234", "src": "https://www3.nd.edu/~dthain/compilerbook/frontcover-2e.jpg", "width": "0", "height": "240"}, "images": {"1": {"item_id": "1823290234", "image_id": "1", "src": "https://www3.nd.edu/~dthain/compilerbook/frontcover-2e.jpg", "width": "0", "height": "240", "credit": "", "caption": ""}, "2": {"item_id": "1823290234", "image_id": "2", "src": "https://www3.nd.edu/~dthain/compilerbook/frontcover.png", "width": "0", "height": "240", "credit": "", "caption": ""}}, "listen_duration_estimate": 72}}, "error": nil, "search_meta": {"search_type": "normal"}, "since": 1709173507}