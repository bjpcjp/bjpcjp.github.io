id,title,note,excerpt,url,folder,tags,created,cover,highlights,favorite
876797831,BM25S: A Python Package that Implements the BM25 Algorithm for Ranking Docu,,"In the era of vast data, information retrieval is crucial for search engines, recommender systems, and any application that needs to find documents based on their content. The process involves three key challenges: relevance assessment, document ranking, and efficiency. The recently introduced Python library that implements the BM25 algorithm, BM25S addresses the challenge of efficient and effective information retrieval, particularly the need for ranking documents in response to user queries. The goal is to enhance the speed and memory efficiency of the BM25 algorithm, a standard method for ranking documents by their relevance to a query. Current methods for implementing",https://www.marktechpost.com/2024/06/23/bm25s-a-python-package-that-implements-the-bm25-algorithm-for-ranking-documents-based-on-a-query,my_library,"python, search",2024-06-23T17:46:18.000Z,https://www.marktechpost.com/wp-content/uploads/2024/06/Screenshot-2024-06-23-at-12.03.20-AM.png,,False
876793947,Getting started with Elasticsearch Python,,This blog will introduce you to some core concepts and building blocks of working with the official...,https://dev.to/iuliaferoli/getting-started-with-elasticsearch-python-5adi,my_library,"elasticsearch, python",2024-02-10T01:35:34.000Z,"https://media.dev.to/dynamic/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fbhkojzob64bjbynem8h7.png",,False
876788744,matsui528/nanopq: Pure python implementation of product quantization for nearest neighbor search,,Pure python implementation of product quantization for nearest neighbor search - matsui528/nanopq,https://github.com/matsui528/nanopq,my_library,"deep-learning, python, search",2022-10-14T19:03:06.000Z,https://opengraph.githubassets.com/973d6af5f6bf1bef3592404c31ee714b149725ea8d6106a057a56fe504be5cfd/matsui528/nanopq,,False
876788737,Product Quantization for Similarity Search,,How to compress and fit a humongous set of vectors in memory for similarity search with asymmetric distance computation (ADC),https://towardsdatascience.com/product-quantization-for-similarity-search-2f1f67c5fddd,my_library,"machine-learning, metrics, python, search",2022-10-14T19:02:02.000Z,https://miro.medium.com/v2/da:true/resize:fit:1200/0*p5_lEAB_bMtMgPNt,,False
876778330,Building a full-text search engine in 150 lines of Python code Â· Bart de Goede,,"Full-text search is everywhere. From finding a book on Scribd, a movie on Netflix, toilet paper on Amazon, or anything else on the web through Google (like [how to do your job as a software engineer](https://localghost.dev/2019/09/everything-i-googled-in-a-week-as-a-professional-software-engineer/)), you've searched vast amounts of unstructured data multiple times today. What's even more amazing, is that you've even though you searched millions (or [billions](https://www.worldwidewebsize.com/)) of records, you got a response in milliseconds. In this post, we are going to build a basic full-text search engine that can search across millions of documents and rank them according to their relevance to the query in milliseconds, in less than 150 lines of code!",https://bart.degoe.de/building-a-full-text-search-engine-150-lines-of-code,my_library,"keywords-ppc-seo, python, search",2021-03-28T17:25:22.000Z,,,False
